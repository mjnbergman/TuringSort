import Interfaces.dzn;
import Components.dzn;

component System {
	provides iControl port;
	
	system {
		Test test;
		ConveyerBelt belt;
		ReflectionSensor sensor;
		Display display;
		
		port <=> test.port;
		belt.port <=> test.belt;
		sensor.port <=> test.reflectionSensor;
		display.port <=> test.output; 
	}
}

component Test {
	provides iControl port;
	requires iSensor reflectionSensor;
	requires iOutput output;
	requires iConveyerBelt belt;
	
	behaviour {
		iControl.State state = iControl.State.Off;
		
		[state.On] {
			on port.turnOn(): illegal;
			on port.turnOff(): { 
				state = iControl.State.Off; 
				belt.turnOff();
				reflectionSensor.turnOff(); 
				output.turnOff();
			}
			on belt.error(): {
				state = iControl.State.Off;
				belt.turnOff();
				reflectionSensor.turnOff();
				output.turnOff();
				port.error();
			}
		}
		[state.Off] {
			on port.turnOn(): { state = iControl.State.On; belt.turnOn();}
			on port.turnOff(): {}
			on belt.error(): illegal;
		}
	}
}
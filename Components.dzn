import Interfaces.dzn;

component Motor {
	provides iMotor port;
}

component Display {
	provides iOutput port;
}

component Light {
	provides iControl port;
}

component LightSensor {
	provides iSensor port;
}

component ReflectionControl {
	provides iSensor port;
	requires iControl light;
	requires iSensor sensor;
	
	behaviour {
		enum State {On, Off};
		State state = State.Off;
		
		[state.Off] {
			on port.turnOn(): {state = State.On; light.turnOn(); sensor.turnOn();} 
			on port.turnOff(): {}
			on port.calibrate(): illegal;
		}
		
		[state.On] {
			on port.turnOn(): illegal;
			on port.turnOff(): {state = State.Off; light.turnOff(); sensor.turnOff();}
			on port.calibrate(): sensor.calibrate();
			on sensor.measures(value): port.measures(value);
			on light.error(): {}
		}	
	}
}

component ReflectionSensor {
	provides iSensor port;
	
	system {
		ReflectionControl control;
		LightSensor sensor;
		Light light;
		
		control.port <=> port; 
		sensor.port <=> control.sensor;
		light.port <=> control.light;	
	}
}

component ConveyerBeltControl {
	provides iConveyerBelt port;
	requires iMotor motor;
	
	behaviour {
		iConveyerBelt.Direction direction = iConveyerBelt.Direction.Clockwise;
		iConveyerBelt.State state = iConveyerBelt.State.Off;
		
		[state.Off] {
			on port.setClockwise(): direction = iConveyerBelt.Direction.Clockwise;
			on port.setCounterClockwise(): direction = iConveyerBelt.Direction.CounterClockwise;
			on port.turnOn(): [direction.Clockwise] {state = iConveyerBelt.State.On; motor.turnClockwise();}
			on port.turnOn(): [direction.CounterClockwise] {state = iConveyerBelt.State.On; motor.turnCounterClockwise();}
			on port.turnOff(): {} 
			on motor.error(): illegal;
		}
		
		[state.On] {
			on port.setClockwise(): illegal;
			on port.setCounterClockwise(): illegal;
			on port.turnOn(): illegal;
			on port.turnOff(): {motor.turnOff(); state = iConveyerBelt.State.Off;}
			on motor.error(): {motor.turnOff(); port.error(); state = iConveyerBelt.State.Off;}
		}
		
	}
}

component ConveyerBelt {
	provides iConveyerBelt port;
	
	system {
		ConveyerBeltControl control;
		Motor motor;
		
		control.port <=> port;
		motor.port <=> control.motor;
	}
}
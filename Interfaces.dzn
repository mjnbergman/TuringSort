extern String $std::string$;
extern int $int$;

interface iMotor
{
	in void turnClockwise();
	in void turnOff();
	in void turnCounterClockwise();
	out void error();
	
	behaviour {
		enum State {Clock, Off, CounterClock};
		State state = State.Off;
		
		[state.Clock] {
			on turnClockwise: illegal;
			on turnCounterClockwise: illegal;
			on turnOff: state = State.Off;
			on inevitable: {error; state = State.Off;}
		}
		
		[state.Off] {
			on turnClockwise: state = State.Clock;
			on turnOff: {}
			on turnCounterClockwise: state = State.CounterClock;
		}
		
		[state.CounterClock] {
			on turnClockwise: illegal;
			on turnCounterClockwise: illegal;
			on turnOff: state = State.Off;
			on inevitable: {error; state = State.Off;}
		}
	}
}

interface iOutput {
	in void turnOn();
	in void turnOff();
	in void output(in String output);
	
	behaviour {
		enum State {On, Off};
		State state = State.Off;
		
		[state.Off] {
			on turnOn: state = State.On;
			on turnOff: {}
			on output: illegal;
		}
		
		[state.On] {
			on turnOn: illegal;
			on turnOff: state = State.Off;
			on output: {}
		}
	}
}

interface iSensor {
	in void turnOn();
	in void turnOff();
	in void calibrate();
	out void measures();
	
	behaviour {
		enum State {On, Off};
		State state = State.Off;
		
		[state.Off] {
			on turnOn: state = State.On; 
			on turnOff: {}
			on calibrate: illegal;
		}
		
		[state.On] {
			on turnOn: illegal;
			on turnOff: state = State.Off;
			on calibrate: {}
		}	
	}
	
}

interface iControl {
	enum State {On, Off};
	in void turnOn();
	in void turnOff();
	out void error();
	
	behaviour {
		State state = State.Off;
		
		[state.Off] {
			on turnOn: state = State.On; 
			on turnOff: {}
		}
		[state.On] {
			on turnOn: illegal;
			on turnOff: state = State.Off;
			on inevitable: {error; state = State.Off;}
		}
	}
}

interface iConveyerBelt {
	enum State {On, Off};
	enum Direction {Clockwise, CounterClockwise};
	in void turnOn();
	in void turnOff();
	in void setClockwise();
	in void setCounterClockwise();
	out void error();
	
	behaviour {
		State state = State.Off;
		
		[state.Off] {
			on turnOn: state = State.On;
			on turnOff: {}
			on setClockwise: {}
			on setCounterClockwise: {}
		}
		[state.On] {
			on turnOn: illegal;
			on turnOff: state = State.Off;
			on setClockwise: illegal;
			on setCounterClockwise: illegal;
			on inevitable: {error; state = State.Off;}
		}
		
	}
	
}